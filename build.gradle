/*
 Copyright 2015 Battams, Derek
 
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
 
		http://www.apache.org/licenses/LICENSE-2.0
 
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

plugins {
	id 'java'
	id 'eclipse'
	id 'maven-publish'
	id 'net.nemerosa.versioning' version '1.3.0'
	id 'com.jfrog.bintray' version '1.2'
	id 'com.jfrog.artifactory' version '3.0.1'
}

versioning {
	releaseMode = 'snapshot'
}

versionFile {
	def props = new File(sourceSets.main.resources.srcDirs[0], 'sdjson-api-versioning.properties')
	outputs.file props
	outputs.upToDateWhen { false }
	file = props
}

group = 'org.schedulesdirect'
version = versioning.info.display
sourceCompatibility = '1.7'

repositories {
	mavenCentral()
}

dependencies {
	compile 'commons-logging:commons-logging:1.1.1'
	compile 'org.json:json:20140107'
	compile('com.fasterxml.jackson.datatype:jackson-datatype-json-org:2.5.1') {
		exclude(group: 'org.apache.geronimo.bundles', module: 'json')
	}
	compile 'commons-io:commons-io:1.4'
	compile 'commons-codec:commons-codec:1.3'
	compile 'org.apache.httpcomponents:fluent-hc:4.2.1'

	testCompile 'log4j:log4j:1.2.17'	
	testCompile 'org.powermock:powermock-module-junit4:1.5.4'
	testCompile 'org.powermock:powermock-api-mockito:1.5.4'
}

task releaseSanityChecks << {
	assert System.getProperty('bintray.user')
	assert System.getProperty('bintray.key')
	assert versioning.info.branch.startsWith('release/')
	assert !versioning.info.display.endsWith('-SNAPSHOT')
	assert !versioning.info.display.contains('-dirty')
}

task snapshotSanityChecks << {
	assert System.getProperty('bintray.user')
	assert System.getProperty('bintray.key')
	assert versioning.info.branch.startsWith('release/')
	assert versioning.info.display.endsWith('-SNAPSHOT')
	assert !versioning.info.display.contains('-dirty')
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar, javadocJar
}

publishing {
	publications {
		mavenGoodies(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
			// Hopefully, some day this xml hack can be removed
			pom.withXml {
				asNode().dependencies.'*'.findAll {
					it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
						dep.name == it.artifactId.text()
					}
				}.each { it.scope*.value = 'compile' }
			}
		}
	}
}

artifactory {
	contextUrl = 'https://oss.jfrog.org'   //The base Artifactory URL if not overridden by the publisher/resolver
	publish {
		//A closure defining publishing information
		repository {
			repoKey = 'oss-snapshot-local'   //The Artifactory repository key to publish to
			username = System.getProperty('bintray.user')          //The publisher user name
			password = System.getProperty('bintray.key')       //The publisher password
		}
		defaults {
			//This closure defines defaults for all 'artifactoryPublish' tasks of all projects the plugin is applied to
			publications ('mavenGoodies')                     //Optional list of publications (names or objects) to publish.
			publishBuildInfo = true   //Publish build-info to Artifactory (true by default)
			publishArtifacts = true   //Publish artifacts to Artifactory (true by default)
			publishPom = true   //Publish generated POM files to Artifactory (true by default).
			publishIvy = true   //Publish generated Ivy descriptor files to Artifactory (true by default).
		}
	}
}

bintray {
	user = System.getProperty('bintray.user')
	key = System.getProperty('bintray.key')
	publications = ['mavenGoodies']
	publish = false
	pkg {
		repo = 'maven'
		name = 'sdjson-api'
		desc = 'A Java client implementation of the Schedules Direct JSON data service.'
		websiteUrl = 'https://github.com/Slugger/sdjson-api'
		issueTrackerUrl = 'https://github.com/Slugger/sdjson-api/issues'
		vcsUrl = 'https://github.com/Slugger/sdjson-api.git'
		licenses = ['Apache-2.0']
		labels = ['tv', 'epg', 'json', 'schedulesdirect']
		attributes= ['plat': ['java']]
		publicDownloadNumbers = false
		version {
			name = project.version
			desc = 'Initial support for Schedules Direct API 20141201.'
			//vcsTag = '1.3.0'
		}
	}
}

compileJava.dependsOn versionFile
bintrayUpload.dependsOn releaseSanityChecks
artifactoryPublish.dependsOn snapshotSanityChecks